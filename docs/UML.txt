digraph UsesTest { rankdir=BT;IComponent[shape="record",label = "{IComponent\n||+ getType() : String\l+ getName() : String\l+ getDescription() : String\l+ getSignature() : String\l}"];IComponent -> ITraverser [arrowhead="onormal", style="dashed"];IDeclaration[shape="record",label = "{IDeclaration\n||+ getVersion() : int\l+ getAccess() : int\l+ getName() : String\l+ getSignature() : String\l+ getSuperClass() : String\l+ getInterfaces() : String[]\l+ addComponent(IComponent) : void\l+ getComponents() : Collection\<IComponent\>\l+ getRelations() : Collection\<IRelation\>\l+ addRelation(IRelation) : void\l}"];IDeclaration -> IComponent[arrowhead="vee", style="dashed"];IDeclaration -> IRelation[arrowhead="vee", style="dashed"];IModel[shape="record",label = "{IModel\n||+ addCurrentClass() : void\l+ setCurrentClass(IDeclaration) : void\l+ getCurrentClass() : IDeclaration\l}"];IModel -> IDeclaration[arrowhead="vee", style="dashed"];IRelation[shape="record",label = "{IRelation\n||+ getType() : String\l}"];IRelation -> ITraverser [arrowhead="onormal", style="dashed"];IStatement[shape="record",label = "{IStatement\n||+ getOpcode() : int\l+ getOwner() : String\l+ getName() : String\l+ getDescription() : String\l+ ifInterface() : boolean\l+ getClassName() : String\l+ getMethodName() : String\l}"];IStatement -> IComponent [arrowhead="onormal", style="dashed"];Composition[shape="record",label = "{Composition\n||+ accept(IVisitor) : void\l+ getType() : String\l}"];Composition -> IRelation [arrowhead="onormal", style="dashed"];Composition -> ITraverser [arrowhead="onormal", style="dashed"];Composition -> IVisitor[arrowhead="vee", style="dashed"];Declaration[shape="record",label = "{Declaration\n|# version : int\l# access : int\l# name : String\l# signature : String\l# superName : String\l# interfaces : String[]\l# components : Collection\<IComponent\>\l# relations : Collection\<IRelation\>\l|+ getVersion() : int\l+ getAccess() : int\l+ getName() : String\l+ getSignature() : String\l+ getSuperClass() : String\l+ getInterfaces() : String[]\l+ addComponent(IComponent) : void\l+ getComponents() : Collection\<IComponent\>\l+ addRelation(IRelation) : void\l+ getRelations() : Collection\<IRelation\>\l+ accept(IVisitor) : void\l}"];Declaration -> IDeclaration [arrowhead="onormal", style="dashed"];Declaration -> ITraverser [arrowhead="onormal", style="dashed"];Declaration -> IComponent[arrowhead="vee", style="dashed"];Declaration -> IRelation[arrowhead="vee", style="dashed"];Declaration -> IVisitor[arrowhead="vee", style="dashed"];Field[shape="record",label = "{Field\n|# access : int\l# name : String\l# description : String\l# signature : String\l# value : Object\l|+ getAccess() : int\l+ getName() : String\l+ getDescription() : String\l+ getSignature() : String\l+ getValue() : Object\l+ accept(IVisitor) : void\l+ getType() : String\l}"];Field -> IComponent [arrowhead="onormal", style="dashed"];Field -> ITraverser [arrowhead="onormal", style="dashed"];Field -> IVisitor[arrowhead="vee", style="dashed"];Method[shape="record",label = "{Method\n|# access : int\l# name : String\l# description : String\l# signature : String\l# exceptions : String[]\l|+ getAccess() : int\l+ getName() : String\l+ getDescription() : String\l+ getSignature() : String\l+ getExceptions() : String[]\l+ accept(IVisitor) : void\l+ getType() : String\l}"];Method -> IComponent [arrowhead="onormal", style="dashed"];Method -> ITraverser [arrowhead="onormal", style="dashed"];Method -> IVisitor[arrowhead="vee", style="dashed"];Model[shape="record",label = "{Model\n|# currentClass : IDeclaration\l# classList : ArrayList\<IDeclaration\>\l|+ setCurrentClass(IDeclaration) : void\l+ addCurrentClass() : void\l+ getCurrentClass() : IDeclaration\l+ accept(IVisitor) : void\l}"];Model -> IModel [arrowhead="onormal", style="dashed"];Model -> ITraverser [arrowhead="onormal", style="dashed"];Model -> IDeclaration[arrowhead="vee", style="dashed"];Model -> IVisitor[arrowhead="vee", style="dashed"];Singleton[shape="record",label = "{Singleton\n|# className : String\l|+ getType() : String\l+ getClassName() : String\l+ accept(IVisitor) : void\l}"];Singleton -> IRelation [arrowhead="onormal", style="dashed"];Singleton -> ITraverser [arrowhead="onormal", style="dashed"];Singleton -> IVisitor[arrowhead="vee", style="dashed"];Statement[shape="record",label = "{Statement\n|# opcode : int\l# owner : String\l# name : String\l# desc : String\l# inter : boolean\l# className : String\l# methodName : String\l|+ getType() : String\l+ getSignature() : String\l+ getOwner() : String\l+ getName() : String\l+ getDescription() : String\l+ ifInterface() : boolean\l+ accept(IVisitor) : void\l+ getOpcode() : int\l+ getClassName() : String\l+ getMethodName() : String\l}"];Statement -> ITraverser [arrowhead="onormal", style="dashed"];Statement -> IStatement [arrowhead="onormal", style="dashed"];Statement -> IVisitor[arrowhead="vee", style="dashed"];Uses[shape="record",label = "{Uses\n|# className : String\l# referenceName : String\l|+ accept(IVisitor) : void\l+ getType() : String\l+ getClassName() : String\l+ getReferenceName() : String\l}"];Uses -> IRelation [arrowhead="onormal", style="dashed"];Uses -> ITraverser [arrowhead="onormal", style="dashed"];Uses -> IVisitor[arrowhead="vee", style="dashed"];DirectoryReader[shape="record",label = "{DirectoryReader\n|# projectDirectory : String\l# projectFolder : String\l# files : ArrayList\<String\>\l# directories : ArrayList\<String\>\l+ method : String\l+ className : String\l|+ readDirectory() : ArrayList\<String\>\l# containsDirectory() : boolean\l+ getClassName() : String\l+ getMethod() : String\l}"];ClassDeclarationVisitor[shape="record",label = "{ClassDeclarationVisitor\n|# _model : IModel\l|+ visit(int, int, String, String, String, String[]) : void\l}"];ClassDeclarationVisitor -> ClassVisitor [arrowhead="onormal"];ClassDeclarationVisitor -> IModel[arrowhead="vee", style="dashed"];ClassFieldVisitor[shape="record",label = "{ClassFieldVisitor\n|# _model : IModel\l|+ visitField(int, String, String, String, Object) : FieldVisitor\l}"];ClassFieldVisitor -> ClassVisitor [arrowhead="onormal"];ClassFieldVisitor -> IModel[arrowhead="vee", style="dashed"];ClassMethodVisitor[shape="record",label = "{ClassMethodVisitor\n|# _model : IModel\l# api : int\l|+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l}"];ClassMethodVisitor -> ClassVisitor [arrowhead="onormal"];ClassMethodVisitor -> IModel[arrowhead="vee", style="dashed"];DesignParser[shape="record",label = "{DesignParser\n|+ CLASSES : ArrayList\<String\>\l+ markedSelected : String\l+ model : IModel\l|+ main(ArrayList) : void\<String\>\l}"];FirstASM[shape="record",label = "{FirstASM\n|+ myField : String\l| <clinit>() : void\l+ main(String[]) : void\l}"];InvokeVisitor[shape="record",label = "{InvokeVisitor\n|# _model : IModel\l# methodname : String\l|+ visitMethodInsn(int, String, String, String, boolean) : void\l}"];InvokeVisitor -> MethodVisitor [arrowhead="onormal"];InvokeVisitor -> IModel[arrowhead="vee", style="dashed"];SingletonVisitor[shape="record",label = "{SingletonVisitor\n|# _model : IModel\l# isSingleton : boolean\l# isField : boolean\l# isMethod : boolean\l|+ visitField(int, String, String, String, Object) : FieldVisitor\l+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l# setField() : void\l# setMethod() : void\l# setSingleton() : void\l}"];SingletonVisitor -> ClassVisitor [arrowhead="onormal"];SingletonVisitor -> IModel[arrowhead="vee", style="dashed"];UsesVisitor[shape="record",label = "{UsesVisitor\n|# _model : IModel\l|+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l# setUsesRelation(String) : void\l}"];UsesVisitor -> ClassVisitor [arrowhead="onormal"];UsesVisitor -> IModel[arrowhead="vee", style="dashed"];SDEdit[shape="record",label = "{SDEdit\n||+ main(String[]) : void\l# write(OutputStream, String) : void\l# checkAndChange() : void\l}"];SDEditGenerator[shape="record",label = "{SDEditGenerator\n| fileName : String\l|+ execute() : void\l+ main(String[]) : void\l}"];SDEditOutputStream[shape="record",label = "{SDEditOutputStream\n|# out : OutputStream\l# classFlag : int\l# methodFlag : int\l# fieldMap : Map\<String\>\l# counter : int\l+ declare : ArrayList\<String\>\l+ methods : ArrayList\<String\>\l|# write(String) : void\l+ preVisit(IComponent) : void\l+ preVisit(IDeclaration) : void\l addAccessLevel(int) : void\l addReturnType(String) : void\l addArguments(String) : void\l addReturnTypeType(String) : void\l+ preVisit(IStatement) : void\l}"];SDEditOutputStream -> VisitorAdapter [arrowhead="onormal"];SDEditOutputStream -> IComponent[arrowhead="vee", style="dashed"];SDEditOutputStream -> IDeclaration[arrowhead="vee", style="dashed"];SDEditOutputStream -> IStatement[arrowhead="vee", style="dashed"];UMLGenerator[shape="record",label = "{UMLGenerator\n| fileName : String\l|+ execute() : void\l+ main(String[]) : void\l}"];UMLMaker[shape="record",label = "{UMLMaker\n||+ main(String[]) : void\l}"];UMLMakerOutputStream[shape="record",label = "{UMLMakerOutputStream\n|# out : OutputStream\l|# write(String) : void\l+ visit(IComponent) : void\l+ visit(IRelation) : void\l+ preVisit(IDeclaration) : void\l+ visit(IDeclaration) : void\l+ postVisit(IDeclaration) : void\l addAccessLevel(int) : void\l addReturnType(String) : void\l addArguments(String) : void\l addReturnTypeType(String) : void\l# addEnter(String) : void\l# addColon(String) : void\l}"];UMLMakerOutputStream -> VisitorAdapter [arrowhead="onormal"];UMLMakerOutputStream -> IComponent[arrowhead="vee", style="dashed"];UMLMakerOutputStream -> IRelation[arrowhead="vee", style="dashed"];UMLMakerOutputStream -> IDeclaration[arrowhead="vee", style="dashed"];ITraverser[shape="record",label = "{ITraverser\n||+ accept(IVisitor) : void\l}"];ITraverser -> IVisitor[arrowhead="vee", style="dashed"];IVisitor[shape="record",label = "{IVisitor\n||+ preVisit(IDeclaration) : void\l+ visit(IDeclaration) : void\l+ postVisit(IDeclaration) : void\l+ preVisit(IComponent) : void\l+ visit(IComponent) : void\l+ postVisit(IComponent) : void\l+ preVisit(IRelation) : void\l+ visit(IRelation) : void\l+ postVisit(IRelation) : void\l+ preVisit(IStatement) : void\l+ visit(IStatement) : void\l+ postVisit(IStatement) : void\l}"];IVisitor -> IDeclaration[arrowhead="vee", style="dashed"];IVisitor -> IComponent[arrowhead="vee", style="dashed"];IVisitor -> IRelation[arrowhead="vee", style="dashed"];IVisitor -> IStatement[arrowhead="vee", style="dashed"];VisitorAdapter[shape="record",label = "{VisitorAdapter\n||+ preVisit(IDeclaration) : void\l+ visit(IDeclaration) : void\l+ postVisit(IDeclaration) : void\l+ preVisit(IComponent) : void\l+ visit(IComponent) : void\l+ postVisit(IComponent) : void\l+ preVisit(IRelation) : void\l+ visit(IRelation) : void\l+ postVisit(IRelation) : void\l+ preVisit(IStatement) : void\l+ visit(IStatement) : void\l+ postVisit(IStatement) : void\l}"];VisitorAdapter -> IVisitor [arrowhead="onormal", style="dashed"];VisitorAdapter -> IDeclaration[arrowhead="vee", style="dashed"];VisitorAdapter -> IComponent[arrowhead="vee", style="dashed"];VisitorAdapter -> IRelation[arrowhead="vee", style="dashed"];VisitorAdapter -> IStatement[arrowhead="vee", style="dashed"];}