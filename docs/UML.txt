digraph UMLMaker2 { rankdir=BT;IComponent[shape="record",label = "{IComponent||+ getType() : String\l+ getName() : String\l+ getDescription() : String\l+ getSignature() : String\l}"];IComponent -> ITraverser [arrowhead="onormal", style="dashed"];IDeclaration[shape="record",label = "{IDeclaration||+ getVersion() : int\l+ getAccess() : int\l+ getName() : String\l+ getSignature() : String\l+ getSuperClass() : String\l+ getInterfaces() : String[]\l+ addComponent(IComponent) : void\l+ getComponents() : Collection\<IComponent\>\l}"];IDeclaration -> IComponent[arrowhead="vee"];IField[shape="record",label = "{IField||+ getAccess() : int\l+ getName() : String\l+ getDescription() : String\l+ getSignature() : String\l+ getValue() : Object\l}"];IField -> IComponent [arrowhead="onormal", style="dashed"];IMethod[shape="record",label = "{IMethod||+ getAccess() : int\l+ getName() : String\l+ getDescription() : String\l+ getSignature() : String\l+ getExceptions() : String[]\l}"];IMethod -> IComponent [arrowhead="onormal", style="dashed"];IModel[shape="record",label = "{IModel||+ addCurrentClass() : void\l+ setCurrentClass(IDeclaration) : void\l+ getCurrentClass() : IDeclaration\l}"];IModel -> IDeclaration[arrowhead="vee"];Declaration[shape="record",label = "{Declaration|# version : int\l# access : int\l# name : String\l# signature : String\l# superName : String\l# interfaces : String[]\l# components : Collection\<IComponent\>\l|+ getVersion() : int\l+ getAccess() : int\l+ getName() : String\l+ getSignature() : String\l+ getSuperClass() : String\l+ getInterfaces() : String[]\l+ addComponent(IComponent) : void\l+ getComponents() : Collection\<IComponent\>\l+ accept(IVisitor) : void\l}"];Declaration -> IDeclaration [arrowhead="onormal", style="dashed"];Declaration -> ITraverser [arrowhead="onormal", style="dashed"];Declaration -> IComponent[arrowhead="vee"];Declaration -> IVisitor[arrowhead="vee"];Field[shape="record",label = "{Field|# access : int\l# name : String\l# description : String\l# signature : String\l# value : Object\l|+ getAccess() : int\l+ getName() : String\l+ getDescription() : String\l+ getSignature() : String\l+ getValue() : Object\l+ accept(IVisitor) : void\l+ getType() : String\l}"];Field -> IField [arrowhead="onormal", style="dashed"];Field -> ITraverser [arrowhead="onormal", style="dashed"];Field -> IVisitor[arrowhead="vee"];Method[shape="record",label = "{Method|# access : int\l# name : String\l# description : String\l# signature : String\l# exceptions : String[]\l|+ getAccess() : int\l+ getName() : String\l+ getDescription() : String\l+ getSignature() : String\l+ getExceptions() : String[]\l+ accept(IVisitor) : void\l+ getType() : String\l}"];Method -> IMethod [arrowhead="onormal", style="dashed"];Method -> ITraverser [arrowhead="onormal", style="dashed"];Method -> IVisitor[arrowhead="vee"];Model[shape="record",label = "{Model|# currentClass : IDeclaration\l# classList : ArrayList\<IDeclaration\>\l|+ setCurrentClass(IDeclaration) : void\l+ addCurrentClass() : void\l+ getCurrentClass() : IDeclaration\l+ accept(IVisitor) : void\l}"];Model -> IModel [arrowhead="onormal", style="dashed"];Model -> ITraverser [arrowhead="onormal", style="dashed"];Model -> IDeclaration[arrowhead="vee", style="dashed"];Model -> IDeclaration[arrowhead="vee"];Model -> IVisitor[arrowhead="vee"];DirectoryReader[shape="record",label = "{DirectoryReader|# projectDirectory : String\l# projectFolder : String\l# files : ArrayList\<String\>\l# directories : ArrayList\<String\>\l|+ readDirectory() : ArrayList\<String\>\l# containsDirectory() : boolean\l}"];ClassDeclarationVisitor[shape="record",label = "{ClassDeclarationVisitor|# _model : IModel\l|+ visit(int, int, String, String, String, String[]) : void\l}"];ClassDeclarationVisitor -> ClassVisitor [arrowhead="onormal"];ClassDeclarationVisitor -> IModel[arrowhead="vee", style="dashed"];ClassDeclarationVisitor -> IModel[arrowhead="vee"];ClassFieldVisitor[shape="record",label = "{ClassFieldVisitor|# _model : IModel\l|+ visitField(int, String, String, String, Object) : FieldVisitor\l# addEnter(String) : void\l# addColon(String) : void\l addAccessLevel(int) : String\l}"];ClassFieldVisitor -> ClassVisitor [arrowhead="onormal"];ClassFieldVisitor -> IModel[arrowhead="vee", style="dashed"];ClassFieldVisitor -> IModel[arrowhead="vee"];ClassMethodVisitor[shape="record",label = "{ClassMethodVisitor|# _model : IModel\l# api : int\l|+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l addAccessLevel(int) : void\l addReturnType(String) : void\l addArguments(String) : void\l}"];ClassMethodVisitor -> ClassVisitor [arrowhead="onormal"];ClassMethodVisitor -> IModel[arrowhead="vee", style="dashed"];ClassMethodVisitor -> IModel[arrowhead="vee"];DesignParser[shape="record",label = "{DesignParser|+ CLASSES : ArrayList\<String\>\l+ model : IModel\l|+ main(ArrayList) : void\<String\>\l}"];DesignParser -> IModel[arrowhead="vee", style="dashed"];FirstASM[shape="record",label = "{FirstASM|+ myField : String\l| <clinit>() : void\l+ main(String[]) : void\l}"];InvokeVisitor[shape="record",label = "{InvokeVisitor|# _model : IModel\l|+ visitInvokeDynamicInsn(String, String, Handle, Object[]) : void\l}"];InvokeVisitor -> MethodVisitor [arrowhead="onormal"];InvokeVisitor -> IModel[arrowhead="vee", style="dashed"];InvokeVisitor -> IModel[arrowhead="vee"];SDEdit[shape="record",label = "{SDEdit||+ main(String[]) : void\l}"];SDEditGenerator[shape="record",label = "{SDEditGenerator| fileName : String\l|+ execute() : void\l+ main(String[]) : void\l}"];SDEditOutputStream[shape="record",label = "{SDEditOutputStream|# out : OutputStream\l|# write(String) : void\l+ visit(IField) : void\l+ visit(IMethod) : void\l+ preVisit(IDeclaration) : void\l+ visit(IDeclaration) : void\l+ postVisit(IDeclaration) : void\l addAccessLevel(int) : void\l addReturnType(String) : void\l addArguments(String) : void\l addReturnTypeType(String) : void\l# addEnter(String) : void\l# addColon(String) : void\l}"];SDEditOutputStream -> VisitorAdapter [arrowhead="onormal"];SDEditOutputStream -> IDeclaration[arrowhead="vee"];SDEditOutputStream -> IField[arrowhead="vee"];SDEditOutputStream -> IMethod[arrowhead="vee"];UMLGenerator[shape="record",label = "{UMLGenerator| fileName : String\l|+ execute() : void\l+ main(String[]) : void\l}"];UMLMaker[shape="record",label = "{UMLMaker||+ main(String[]) : void\l}"];UMLMakerOutputStream[shape="record",label = "{UMLMakerOutputStream|# out : OutputStream\l|# write(String) : void\l+ visit(IField) : void\l+ visit(IMethod) : void\l+ preVisit(IDeclaration) : void\l+ visit(IDeclaration) : void\l+ postVisit(IDeclaration) : void\l addAccessLevel(int) : void\l addReturnType(String) : void\l addArguments(String) : void\l addReturnTypeType(String) : void\l# addEnter(String) : void\l# addColon(String) : void\l}"];UMLMakerOutputStream -> VisitorAdapter [arrowhead="onormal"];UMLMakerOutputStream -> IDeclaration[arrowhead="vee"];UMLMakerOutputStream -> IField[arrowhead="vee"];UMLMakerOutputStream -> IMethod[arrowhead="vee"];ITraverser[shape="record",label = "{ITraverser||+ accept(IVisitor) : void\l}"];ITraverser -> IVisitor[arrowhead="vee"];IVisitor[shape="record",label = "{IVisitor||+ preVisit(IField) : void\l+ visit(IField) : void\l+ postVisit(IField) : void\l+ preVisit(IMethod) : void\l+ visit(IMethod) : void\l+ postVisit(IMethod) : void\l+ preVisit(IDeclaration) : void\l+ visit(IDeclaration) : void\l+ postVisit(IDeclaration) : void\l}"];IVisitor -> IDeclaration[arrowhead="vee"];IVisitor -> IField[arrowhead="vee"];IVisitor -> IMethod[arrowhead="vee"];VisitorAdapter[shape="record",label = "{VisitorAdapter||+ preVisit(IField) : void\l+ visit(IField) : void\l+ postVisit(IField) : void\l+ preVisit(IMethod) : void\l+ visit(IMethod) : void\l+ postVisit(IMethod) : void\l+ preVisit(IDeclaration) : void\l+ visit(IDeclaration) : void\l+ postVisit(IDeclaration) : void\l}"];VisitorAdapter -> IVisitor [arrowhead="onormal", style="dashed"];VisitorAdapter -> IDeclaration[arrowhead="vee"];VisitorAdapter -> IField[arrowhead="vee"];VisitorAdapter -> IMethod[arrowhead="vee"];}