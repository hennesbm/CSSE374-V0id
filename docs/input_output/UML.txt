digraph Test { 
	rankdir=BT;
	splines=ortho;

	IComponent[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{IComponent\n\<\<Target\>\>
		
		|
		|
		+ getType() : String\l
		+ getName() : String\l
		+ getDescription() : String\l
		+ getSignature() : String\l
		}"
	];

	
	IComponent -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	
	
	
	
	
	
	

	IDeclaration[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{IDeclaration\n\<\<Target\>\>
		
		|
		|
		+ getVersion() : int\l
		+ getAccess() : int\l
		+ getName() : String\l
		+ getSignature() : String\l
		+ getSuperClass() : String\l
		+ getInterfaces() : String[]\l
		+ addComponent(IComponent) : void\l
		+ getComponents() : Collection\l
		+ getRelations() : Collection\l
		+ addRelation(IRelation) : void\l
		+ getPatterns() : Collection\l
		+ addPattern(IPattern) : void\l
		+ getHierarchy() : Collection\l
		}"
	];

	
	IDeclaration -> IComponent[arrowhead="vee", style="dashed"];
	IDeclaration -> IRelation[arrowhead="vee", style="dashed"];
	IDeclaration -> IPattern[arrowhead="vee", style="dashed"];
	
	
	

	IModel[
		shape="record",
		label = "{IModel\n
		|
		|
		+ addCurrentClass() : void\l
		+ setCurrentClass(IDeclaration) : void\l
		+ getCurrentClass() : IDeclaration\l
		+ getAllClasses() : ArrayList\l
		}"
	];

	
	IModel -> IDeclaration[arrowhead="vee", style="dashed"];

	IPattern[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{IPattern\n\<\<Target\>\>
		
		|
		|
		+ getType() : String\l
		+ getComponent() : String\l
		+ getColor() : String\l
		}"
	];

	
	IPattern -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	IRelation[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{IRelation\n\<\<Target\>\>
		
		|
		|
		+ getType() : String\l
		}"
	];

	
	IRelation -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	
	
	
	
	
	

	IStatement[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{IStatement\n\<\<Target\>\>
		
		|
		|
		+ getOpcode() : int\l
		+ getOwner() : String\l
		+ getName() : String\l
		+ getDescription() : String\l
		+ ifInterface() : boolean\l
		+ getClassName() : String\l
		+ getMethodName() : String\l
		}"
	];

	
	IStatement -> IComponent[arrowhead="onormal", style="dashed"];
	
	
	
	
	

	Adapter[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Adapter\n\<\<Adapter\>\>
		
		|
		- className : String\l
		- component : String\l
		- adaptee : String\l
		|
		+ Adapter(String, String, String) : void\l
		+ getType() : String\l
		+ getComponent() : String\l
		+ getColor() : String\l
		+ accept(IVisitor) : void\l
		+ getClassName() : String\l
		+ getAdaptee() : String\l
		}"
	];

	
	Adapter -> IPattern[arrowhead="onormal", style="dashed"];
	
	
	Adapter -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	

	Component[
		shape="record",
		label = "{Component\n
		|
		|
		+ Component() : void\l
		+ accept(IVisitor) : void\l
		+ getType() : String\l
		}"
	];

	
	Component -> IRelation[arrowhead="onormal", style="dashed"];
	Component -> ITraverser[arrowhead="onormal", style="dashed"];
	Component -> IVisitor[arrowhead="vee", style="dashed"];

	Composite[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Composite\n\<\<Adapter\>\>
		
		|
		- componentclassname : String\l
		- className : String\l
		- component : String\l
		|
		+ Composite(String, String) : void\l
		+ Composite(String, String, String) : void\l
		+ accept(IVisitor) : void\l
		+ getType() : String\l
		+ getComponent() : String\l
		+ getColor() : String\l
		+ getClassName() : String\l
		+ getComponentClassName() : String\l
		}"
	];

	
	Composite -> IPattern[arrowhead="onormal", style="dashed"];
	
	
	Composite -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	
	

	Composition[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Composition\n\<\<Adapter\>\>
		
		|
		- className : String\l
		- referenceName : String\l
		|
		+ Composition(String, String) : void\l
		+ accept(IVisitor) : void\l
		+ getType() : String\l
		+ getClassName() : String\l
		+ getReferenceName() : String\l
		}"
	];

	
	Composition -> IRelation[arrowhead="onormal", style="dashed"];
	Composition -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	Composition -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	

	Declaration[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Declaration\n\<\<Adapter\>\>
		
		|
		- version : int\l
		- access : int\l
		- name : String\l
		- signature : String\l
		- superName : String\l
		- interfaces : String[]\l
		- components : Collection\l
		- relations : Collection\l
		- patterns : Collection\l
		- hierarchy : Collection\l
		|
		+ Declaration(int, int, String, String, String, String[]) : void\l
		+ getVersion() : int\l
		+ getAccess() : int\l
		+ getName() : String\l
		+ getSignature() : String\l
		+ getSuperClass() : String\l
		+ getInterfaces() : String[]\l
		+ addComponent(IComponent) : void\l
		+ getComponents() : Collection\l
		+ addRelation(IRelation) : void\l
		+ getRelations() : Collection\l
		+ accept(IVisitor) : void\l
		+ isAbstract() : boolean\l
		+ isInterface() : boolean\l
		+ getPatterns() : Collection\l
		+ addPattern(IPattern) : void\l
		+ getHierarchy() : Collection\l
		}"
	];

	
	Declaration -> IDeclaration[arrowhead="onormal", style="dashed"];
	Declaration -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	
	
	
	
	
	Declaration -> IComponent[arrowhead="vee", style="dashed"];
	Declaration -> IRelation[arrowhead="vee", style="dashed"];
	Declaration -> IVisitor[arrowhead="vee", style="dashed"];
	Declaration -> IPattern[arrowhead="vee", style="dashed"];
	
	
	
	
	
	

	Decorator[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Decorator\n\<\<Adapter\>\>
		
		|
		- decorates : String\l
		- className : String\l
		- component : String\l
		|
		+ Decorator(String, String) : void\l
		+ Decorator(String, String, String) : void\l
		+ accept(IVisitor) : void\l
		+ getType() : String\l
		+ getDecorates() : String\l
		+ getComponent() : String\l
		+ getColor() : String\l
		+ getClassName() : String\l
		}"
	];

	
	Decorator -> IPattern[arrowhead="onormal", style="dashed"];
	
	
	Decorator -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	
	

	Extends[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Extends\n\<\<Adapter\>\>
		
		|
		- className : String\l
		- referenceName : String\l
		|
		+ Extends(String, String) : void\l
		+ accept(IVisitor) : void\l
		+ getType() : String\l
		+ getClassName() : String\l
		+ getReferenceName() : String\l
		}"
	];

	
	Extends -> IRelation[arrowhead="onormal", style="dashed"];
	Extends -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	Extends -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	

	Field[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Field\n\<\<Adapter\>\>
		
		|
		- access : int\l
		- name : String\l
		- description : String\l
		- signature : String\l
		- value : Object\l
		- className : String\l
		|
		+ Field(int, String, String, String, Object, String) : void\l
		+ getAccess() : int\l
		+ getName() : String\l
		+ getDescription() : String\l
		+ getSignature() : String\l
		+ getValue() : Object\l
		+ accept(IVisitor) : void\l
		+ getType() : String\l
		+ getClassName() : String\l
		}"
	];

	
	Field -> IComponent[arrowhead="onormal", style="dashed"];
	Field -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	
	
	
	
	Field -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	
	
	
	
	
	
	

	Implements[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Implements\n\<\<Adapter\>\>
		
		|
		- className : String\l
		- referenceName : String\l
		|
		+ Implements(String, String) : void\l
		+ accept(IVisitor) : void\l
		+ getType() : String\l
		+ getClassName() : String\l
		+ getReferenceName() : String\l
		}"
	];

	
	Implements -> IRelation[arrowhead="onormal", style="dashed"];
	Implements -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	Implements -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	

	Method[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Method\n\<\<Adapter\>\>
		
		|
		- access : int\l
		- name : String\l
		- description : String\l
		- signature : String\l
		- exceptions : String[]\l
		- className : String\l
		|
		+ Method(int, String, String, String, String[], String) : void\l
		+ getAccess() : int\l
		+ getName() : String\l
		+ getDescription() : String\l
		+ getSignature() : String\l
		+ getExceptions() : String[]\l
		+ accept(IVisitor) : void\l
		+ getType() : String\l
		+ getClassName() : String\l
		}"
	];

	
	Method -> IComponent[arrowhead="onormal", style="dashed"];
	Method -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	
	
	
	
	Method -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	
	
	
	
	

	Model[
		shape="record",
		label = "{Model\n
		|
		- currentClass : IDeclaration\l
		- classList : ArrayList\l
		|
		+ Model() : void\l
		+ setCurrentClass(IDeclaration) : void\l
		+ addCurrentClass() : void\l
		+ getCurrentClass() : IDeclaration\l
		+ accept(IVisitor) : void\l
		+ getAllClasses() : ArrayList\l
		}"
	];

	
	Model -> IModel[arrowhead="onormal", style="dashed"];
	Model -> ITraverser[arrowhead="onormal", style="dashed"];
	Model -> IDeclaration[arrowhead="vee"];
	
	Model -> IDeclaration[arrowhead="vee", style="dashed"];
	Model -> IVisitor[arrowhead="vee", style="dashed"];

	Singleton[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Singleton\n\<\<Adapter\>\>
		
		|
		- className : String\l
		|
		+ Singleton(String) : void\l
		+ getType() : String\l
		+ accept(IVisitor) : void\l
		+ getComponent() : String\l
		+ getColor() : String\l
		+ getClassName() : String\l
		}"
	];

	
	Singleton -> IPattern[arrowhead="onormal", style="dashed"];
	
	
	Singleton -> IVisitor[arrowhead="vee", style="dashed"];
	

	Statement[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Statement\n\<\<Adapter\>\>
		
		|
		- opcode : int\l
		- owner : String\l
		- name : String\l
		- desc : String\l
		- inter : boolean\l
		- className : String\l
		- methodName : String\l
		|
		+ Statement(int, String, String, String, boolean, String, String) : void\l
		+ getType() : String\l
		+ getSignature() : String\l
		+ getOwner() : String\l
		+ getName() : String\l
		+ getDescription() : String\l
		+ ifInterface() : boolean\l
		+ accept(IVisitor) : void\l
		+ getOpcode() : int\l
		+ getClassName() : String\l
		+ getMethodName() : String\l
		}"
	];

	
	Statement -> ITraverser[arrowhead="onormal", style="dashed"];
	Statement -> IStatement[arrowhead="onormal", style="dashed"];
	
	
	
	
	
	
	Statement -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	
	
	
	
	
	
	

	Uses[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{Uses\n\<\<Adapter\>\>
		
		|
		- className : String\l
		- referenceName : String\l
		|
		+ Uses(String, String) : void\l
		+ accept(IVisitor) : void\l
		+ getType() : String\l
		+ getClassName() : String\l
		+ getReferenceName() : String\l
		}"
	];

	
	Uses -> IRelation[arrowhead="onormal", style="dashed"];
	Uses -> ITraverser[arrowhead="onormal", style="dashed"];
	
	
	Uses -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	

	DirectoryReader[
		shape="record",
		label = "{DirectoryReader\n
		|
		+ j : Component\l
		- projectDirectory : String\l
		- projectFolder : String\l
		- files : ArrayList\l
		- directories : ArrayList\l
		+ method : String\l
		+ className : String\l
		|
		+ DirectoryReader(String) : void\l
		+ DirectoryReader(String, String) : void\l
		+ DirectoryReader(String, String, String, String) : void\l
		+ readDirectory() : ArrayList\l
		- containsDirectory() : boolean\l
		+ getClassName() : String\l
		+ getMethod() : String\l
		}"
	];

	
	DirectoryReader -> Component[arrowhead="vee"];
	
	
	

	AdapterVisitor[
		shape="record",
		label = "{AdapterVisitor\n
		|
		- _model : IModel\l
		- currentClass : String\l
		- interfaceClasses : ArrayList\l
		- fields : ArrayList\l
		- removedClasses : ArrayList\l
		|
		+ AdapterVisitor(int, IModel) : void\l
		+ AdapterVisitor(int, ClassVisitor, IModel) : void\l
		+ visit(int, int, String, String, String, String[]) : void\l
		+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l
		+ visitEnd() : void\l
		- setPattern(String, String, String) : void\l
		}"
	];

	AdapterVisitor -> ClassVisitor [arrowhead="onormal"];
	AdapterVisitor -> IModel[arrowhead="vee"];
	
	
	
	AdapterVisitor -> IModel[arrowhead="vee", style="dashed"];
	AdapterVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	

	ClassDeclarationVisitor[
		shape="record",
		label = "{ClassDeclarationVisitor\n
		|
		- _model : IModel\l
		|
		+ ClassDeclarationVisitor(int, IModel) : void\l
		+ visit(int, int, String, String, String, String[]) : void\l
		}"
	];

	ClassDeclarationVisitor -> ClassVisitor [arrowhead="onormal"];
	ClassDeclarationVisitor -> IModel[arrowhead="vee"];
	
	ClassDeclarationVisitor -> IModel[arrowhead="vee", style="dashed"];
	
	

	ClassDecoratorVisitor[
		shape="record",
		label = "{ClassDecoratorVisitor\n
		|
		- _model : IModel\l
		- superclass : ArrayList\l
		- current : IDeclaration\l
		|
		+ ClassDecoratorVisitor(int, IModel) : void\l
		+ ClassDecoratorVisitor(int, ClassVisitor, IModel) : void\l
		+ visit(int, int, String, String, String, String[]) : void\l
		+ visitField(int, String, String, String, Object) : FieldVisitor\l
		+ findAllSuper(ArrayList, String) : void\l
		}"
	];

	ClassDecoratorVisitor -> ClassVisitor [arrowhead="onormal"];
	ClassDecoratorVisitor -> IModel[arrowhead="vee"];
	
	ClassDecoratorVisitor -> IDeclaration[arrowhead="vee"];
	
	ClassDecoratorVisitor -> IModel[arrowhead="vee", style="dashed"];
	ClassDecoratorVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	
	
	

	ClassFieldVisitor[
		shape="record",
		label = "{ClassFieldVisitor\n
		|
		- _model : IModel\l
		|
		+ ClassFieldVisitor(int, IModel) : void\l
		+ ClassFieldVisitor(int, ClassVisitor, IModel) : void\l
		+ visitField(int, String, String, String, Object) : FieldVisitor\l
		}"
	];

	ClassFieldVisitor -> ClassVisitor [arrowhead="onormal"];
	ClassFieldVisitor -> IModel[arrowhead="vee"];
	
	ClassFieldVisitor -> IModel[arrowhead="vee", style="dashed"];
	ClassFieldVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	

	ClassMethodVisitor[
		shape="record",
		label = "{ClassMethodVisitor\n
		|
		- _model : IModel\l
		- api : int\l
		|
		+ ClassMethodVisitor(int, IModel) : void\l
		+ ClassMethodVisitor(int, ClassVisitor, IModel) : void\l
		+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l
		}"
	];

	ClassMethodVisitor -> ClassVisitor [arrowhead="onormal"];
	ClassMethodVisitor -> IModel[arrowhead="vee"];
	
	
	ClassMethodVisitor -> IModel[arrowhead="vee", style="dashed"];
	ClassMethodVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	

	CompositeVisitor[
		shape="record",
		label = "{CompositeVisitor\n
		|
		- _model : IModel\l
		- current : IDeclaration\l
		- tempcomponent : IDeclaration\l
		|
		+ CompositeVisitor(int) : void\l
		+ CompositeVisitor(int, IModel) : void\l
		+ CompositeVisitor(int, ClassVisitor, IModel) : void\l
		+ visit(int, int, String, String, String, String[]) : void\l
		+ visitField(int, String, String, String, Object) : FieldVisitor\l
		+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l
		- isPotentialComposite(String, String, Collection) : Boolean\l
		}"
	];

	CompositeVisitor -> ClassVisitor [arrowhead="onormal"];
	CompositeVisitor -> IModel[arrowhead="vee"];
	CompositeVisitor -> IDeclaration[arrowhead="vee"];
	
	CompositeVisitor -> IModel[arrowhead="vee", style="dashed"];
	CompositeVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	
	
	

	CompositionVisitor[
		shape="record",
		label = "{CompositionVisitor\n
		|
		- _model : IModel\l
		|
		+ CompositionVisitor(int, IModel) : void\l
		+ CompositionVisitor(int, ClassVisitor, IModel) : void\l
		+ visitField(int, String, String, String, Object) : FieldVisitor\l
		- setCompositionRelation(String) : void\l
		}"
	];

	CompositionVisitor -> ClassVisitor [arrowhead="onormal"];
	CompositionVisitor -> IModel[arrowhead="vee"];
	
	CompositionVisitor -> IModel[arrowhead="vee", style="dashed"];
	CompositionVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	

	DesignParser[
		shape="record",
		label = "{DesignParser\n
		|
		+ CLASSES : ArrayList\l
		+ markedSelected : String\l
		+ model : IModel\l
		|
		+ DesignParser() : void\l
		+ main(ArrayList) : void\l
		}"
	];

	
	
	
	DesignParser -> IModel[arrowhead="vee"];
	

	ExtensionVisitor[
		shape="record",
		label = "{ExtensionVisitor\n
		|
		- _model : IModel\l
		|
		+ ExtensionVisitor(int, IModel) : void\l
		+ ExtensionVisitor(int, ClassVisitor, IModel) : void\l
		+ visit(int, int, String, String, String, String[]) : void\l
		- setExtensionRelation(String) : void\l
		}"
	];

	ExtensionVisitor -> ClassVisitor [arrowhead="onormal"];
	ExtensionVisitor -> IModel[arrowhead="vee"];
	
	ExtensionVisitor -> IModel[arrowhead="vee", style="dashed"];
	ExtensionVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	

	FirstASM[
		shape="record",
		label = "{FirstASM\n
		|
		+ myField : String\l
		|
		 <clinit>() : void\l
		+ FirstASM() : void\l
		+ main(String[]) : void\l
		}"
	];

	
	
	

	HierarchyVisitor[
		shape="record",
		label = "{HierarchyVisitor\n
		|
		- _model : IModel\l
		- current : IDeclaration\l
		|
		+ HierarchyVisitor(int) : void\l
		+ HierarchyVisitor(int, ClassVisitor, IModel) : void\l
		+ visit(int, int, String, String, String, String[]) : void\l
		+ findAllSuper(Collection, String) : void\l
		}"
	];

	HierarchyVisitor -> ClassVisitor [arrowhead="onormal"];
	HierarchyVisitor -> IModel[arrowhead="vee"];
	HierarchyVisitor -> IDeclaration[arrowhead="vee"];
	
	HierarchyVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	HierarchyVisitor -> IModel[arrowhead="vee", style="dashed"];
	
	
	

	ImplementationVisitor[
		shape="record",
		label = "{ImplementationVisitor\n
		|
		- _model : IModel\l
		|
		+ ImplementationVisitor(int, IModel) : void\l
		+ ImplementationVisitor(int, ClassVisitor, IModel) : void\l
		+ visit(int, int, String, String, String, String[]) : void\l
		- setImplementationRelation(String) : void\l
		}"
	];

	ImplementationVisitor -> ClassVisitor [arrowhead="onormal"];
	ImplementationVisitor -> IModel[arrowhead="vee"];
	
	ImplementationVisitor -> IModel[arrowhead="vee", style="dashed"];
	ImplementationVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	

	InvokeVisitor[
		shape="record",
		label = "{InvokeVisitor\n
		|
		- _model : IModel\l
		- methodname : String\l
		|
		+ InvokeVisitor(int, IModel) : void\l
		+ InvokeVisitor(int, MethodVisitor, IModel, String) : void\l
		+ visitMethodInsn(int, String, String, String, boolean) : void\l
		}"
	];

	InvokeVisitor -> MethodVisitor [arrowhead="onormal"];
	InvokeVisitor -> IModel[arrowhead="vee"];
	
	
	InvokeVisitor -> IModel[arrowhead="vee", style="dashed"];
	InvokeVisitor -> MethodVisitor[arrowhead="vee", style="dashed"];
	
	

	LeafVisitor[
		shape="record",
		label = "{LeafVisitor\n
		|
		- _model : IModel\l
		- current : IDeclaration\l
		- currentsuperclass : IDeclaration\l
		|
		+ LeafVisitor(int) : void\l
		+ LeafVisitor(int, IModel) : void\l
		+ LeafVisitor(int, ClassVisitor, IModel) : void\l
		+ visit(int, int, String, String, String, String[]) : void\l
		+ getAllComposite(IDeclaration, IDeclaration) : void\l
		}"
	];

	LeafVisitor -> ClassVisitor [arrowhead="onormal"];
	LeafVisitor -> IModel[arrowhead="vee"];
	LeafVisitor -> IDeclaration[arrowhead="vee"];
	
	LeafVisitor -> IModel[arrowhead="vee", style="dashed"];
	LeafVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	
	LeafVisitor -> IDeclaration[arrowhead="vee", style="dashed"];

	PatternParser[
		shape="record",
		label = "{PatternParser\n
		|
		+ CLASSES : ArrayList\l
		+ model : IModel\l
		|
		+ PatternParser() : void\l
		+ main(ArrayList, IModel) : void\l
		}"
	];

	
	
	PatternParser -> IModel[arrowhead="vee"];
	
	PatternParser -> IModel[arrowhead="vee", style="dashed"];

	SingletonVisitor[
		shape="record",
		label = "{SingletonVisitor\n
		|
		- _model : IModel\l
		- currentClass : String\l
		- isSingleton : boolean\l
		- isField : boolean\l
		- isMethod : boolean\l
		|
		+ SingletonVisitor(int, IModel) : void\l
		+ SingletonVisitor(int, ClassVisitor, IModel) : void\l
		+ visit(int, int, String, String, String, String[]) : void\l
		+ visitField(int, String, String, String, Object) : FieldVisitor\l
		+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l
		- setField() : void\l
		- setMethod() : void\l
		- setSingleton() : void\l
		}"
	];

	SingletonVisitor -> ClassVisitor [arrowhead="onormal"];
	SingletonVisitor -> IModel[arrowhead="vee"];
	
	
	
	SingletonVisitor -> IModel[arrowhead="vee", style="dashed"];
	SingletonVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	
	

	UsesVisitor[
		shape="record",
		label = "{UsesVisitor\n
		|
		- _model : IModel\l
		|
		+ UsesVisitor(int, IModel) : void\l
		+ UsesVisitor(int, ClassVisitor, IModel) : void\l
		+ visitMethod(int, String, String, String, String[]) : MethodVisitor\l
		- setUsesRelation(String) : void\l
		}"
	];

	UsesVisitor -> ClassVisitor [arrowhead="onormal"];
	UsesVisitor -> IModel[arrowhead="vee"];
	
	UsesVisitor -> IModel[arrowhead="vee", style="dashed"];
	UsesVisitor -> ClassVisitor[arrowhead="vee", style="dashed"];
	
	

	SDEdit[
		shape="record",
		label = "{SDEdit\n
		|
		|
		+ SDEdit() : void\l
		+ main(String[]) : void\l
		- write(OutputStream, String) : void\l
		- checkAndChange() : void\l
		}"
	];

	
	
	
	

	SDEditGenerator[
		shape="record",
		label = "{SDEditGenerator\n
		|
		 fileName : String\l
		|
		+ SDEditGenerator(String) : void\l
		+ execute() : void\l
		+ main(String[]) : void\l
		}"
	];

	
	
	
	

	SDEditOutputStream[
		shape="record",
		label = "{SDEditOutputStream\n
		|
		- out : OutputStream\l
		- classFlag : int\l
		- methodFlag : int\l
		- fieldMap : Map\l
		- counter : int\l
		+ declare : ArrayList\l
		+ methods : ArrayList\l
		|
		+ SDEditOutputStream(OutputStream) : void\l
		- write(String) : void\l
		+ preVisit(IComponent) : void\l
		+ preVisit(IDeclaration) : void\l
		 addAccessLevel(int) : void\l
		 addReturnType(String) : void\l
		 addArguments(String) : void\l
		 addReturnTypeType(String) : void\l
		+ preVisit(IStatement) : void\l
		}"
	];

	SDEditOutputStream -> VisitorAdapter [arrowhead="onormal"];
	
	
	
	
	
	
	SDEditOutputStream -> IComponent[arrowhead="vee", style="dashed"];
	SDEditOutputStream -> IDeclaration[arrowhead="vee", style="dashed"];
	
	SDEditOutputStream -> IStatement[arrowhead="vee", style="dashed"];

	UMLGenerator[
		shape="record",
		label = "{UMLGenerator\n
		|
		 fileName : String\l
		 path : String\l
		|
		+ UMLGenerator(String, String) : void\l
		+ execute() : void\l
		}"
	];

	
	
	

	UMLMaker[
		shape="record",
		label = "{UMLMaker\n
		|
		|
		+ UMLMaker() : void\l
		+ main(String[]) : void\l
		}"
	];

	
	

	UMLMakerOutputStream[
		shape="record",
		label = "{UMLMakerOutputStream\n
		|
		- out : OutputStream\l
		- removedClasses : ArrayList\l
		|
		+ UMLMakerOutputStream(OutputStream) : void\l
		- write(String) : void\l
		+ visit(IComponent) : void\l
		+ visit(IRelation) : void\l
		+ visit(IPattern) : void\l
		+ preVisit(IDeclaration) : void\l
		+ visit(IDeclaration) : void\l
		+ postVisit(IDeclaration) : void\l
		- addAccessLevel(int) : void\l
		- addReturnType(String) : void\l
		- addArguments(String) : void\l
		- addEnter(String) : void\l
		- addColon(String) : void\l
		}"
	];

	UMLMakerOutputStream -> VisitorAdapter [arrowhead="onormal"];
	
	
	
	
	UMLMakerOutputStream -> IComponent[arrowhead="vee", style="dashed"];
	UMLMakerOutputStream -> IRelation[arrowhead="vee", style="dashed"];
	UMLMakerOutputStream -> IPattern[arrowhead="vee", style="dashed"];
	UMLMakerOutputStream -> IDeclaration[arrowhead="vee", style="dashed"];
	

	ITraverser[
		shape="record",
		style = "filled", fillcolor = "red";
		label = "{ITraverser\n\<\<Target\>\>
		
		|
		|
		+ accept(IVisitor) : void\l
		}"
	];

	
	ITraverser -> IVisitor[arrowhead="vee", style="dashed"];
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	IVisitor[
		shape="record",
		label = "{IVisitor\n
		|
		|
		+ preVisit(IDeclaration) : void\l
		+ visit(IDeclaration) : void\l
		+ postVisit(IDeclaration) : void\l
		+ preVisit(IComponent) : void\l
		+ visit(IComponent) : void\l
		+ postVisit(IComponent) : void\l
		+ preVisit(IRelation) : void\l
		+ visit(IRelation) : void\l
		+ postVisit(IRelation) : void\l
		+ preVisit(IPattern) : void\l
		+ visit(IPattern) : void\l
		+ postVisit(IPattern) : void\l
		+ preVisit(IStatement) : void\l
		+ visit(IStatement) : void\l
		+ postVisit(IStatement) : void\l
		}"
	];

	
	IVisitor -> IDeclaration[arrowhead="vee", style="dashed"];
	IVisitor -> IComponent[arrowhead="vee", style="dashed"];
	IVisitor -> IRelation[arrowhead="vee", style="dashed"];
	IVisitor -> IPattern[arrowhead="vee", style="dashed"];
	IVisitor -> IStatement[arrowhead="vee", style="dashed"];

	VisitorAdapter[
		shape="record",
		label = "{VisitorAdapter\n
		|
		|
		+ VisitorAdapter() : void\l
		+ preVisit(IDeclaration) : void\l
		+ visit(IDeclaration) : void\l
		+ postVisit(IDeclaration) : void\l
		+ preVisit(IComponent) : void\l
		+ visit(IComponent) : void\l
		+ postVisit(IComponent) : void\l
		+ preVisit(IRelation) : void\l
		+ visit(IRelation) : void\l
		+ postVisit(IRelation) : void\l
		+ preVisit(IPattern) : void\l
		+ visit(IPattern) : void\l
		+ postVisit(IPattern) : void\l
		+ preVisit(IStatement) : void\l
		+ visit(IStatement) : void\l
		+ postVisit(IStatement) : void\l
		}"
	];

	
	VisitorAdapter -> IVisitor[arrowhead="onormal", style="dashed"];
	VisitorAdapter -> IDeclaration[arrowhead="vee", style="dashed"];
	VisitorAdapter -> IComponent[arrowhead="vee", style="dashed"];
	VisitorAdapter -> IRelation[arrowhead="vee", style="dashed"];
	VisitorAdapter -> IPattern[arrowhead="vee", style="dashed"];
	VisitorAdapter -> IStatement[arrowhead="vee", style="dashed"];

}